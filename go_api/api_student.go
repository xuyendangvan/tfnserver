/*
 * Demo App
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	db "git_source_release/db"
	model "git_source_release/model"
	"log"
	"net/http"
	"strconv"
	"time"

	"github.com/gorilla/mux"
)

func AddStudent(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	decoder := json.NewDecoder(r.Body)
	var students model.Student
	err := decoder.Decode(&students)
	log.Println(students)
	if err != nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		return
	}
	e := createRecordStudents(students)
	if e != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
}

func createRecordStudents(students model.Student) (err error) {
	database := db.DBConn()
	defer database.Close()
	tx, err := db.SQLBegin(database)
	if err != nil {
		return err
	}
	ID := students.Id
	ClassID := students.ClassID
	ParentID := students.ParentID
	Name := students.Name
	Birthday := students.Birthday
	DateCreate := time.Now()
	DateUpdate := time.Now()
	//Phone := students.Phone
	//StudentStatus := students.StudentStatus

	insForm, err := db.SQLExec(tx, "INSERT INTO Student(id, parent_id, class_id, name, birthday, face_photo, date_create, date_update, update_count) VALUES(?,?,?,?,?,?,?,?,?)")
	if err != nil {
		return err
	}
	if _, err := insForm.Exec(ID, ParentID, ClassID, Name, Birthday, "", DateCreate, DateUpdate, 0); err != nil {
		tx.Rollback()
		return err
	}
	tx.Commit()
	return nil
}

func DeleteStudentByID(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	ID := mux.Vars(r)["id"]
	log.Printf(ID)
	e := deleteRecordStudent(ID)
	if e != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
}

func deleteRecordStudent(ID string) (err error) {
	database := db.DBConn()
	defer database.Close()
	tx, err := db.SQLBegin(database)
	if err != nil {
		return err
	}
	insForm, err := database.Prepare("DELETE FROM Student WHERE id= ?")
	if _, err := insForm.Exec(ID); err != nil {
		tx.Rollback()
		return err
	}
	tx.Commit()
	return nil
}

func FindStudentByID(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	ID := mux.Vars(r)["id"]
	log.Printf(ID)
	jsonResponse := getDataStudentFromDB(ID)
	if jsonResponse == nil {
		w.WriteHeader(http.StatusNoContent)
		return
	}
	w.Write(jsonResponse)
	w.WriteHeader(http.StatusOK)
}

func getDataStudentFromDB(id string) []byte {
	database := db.DBConn()
	defer database.Close()
	var (
		user    model.Student
		records []model.Student
	)
	rows, err := database.Query("SELECT * FROM Student WHERE id= ?", id)
	if err != nil {
		fmt.Println(err)
		return nil
	}
	for rows.Next() {
		var date, datecreate time.Time
		var count int
		var face_photo string
		rows.Scan(&user.Id, &user.ParentID, &user.ClassID, &user.Name, &user.Birthday, &face_photo, &datecreate, &date, &count)
		//user.UpdateDate = h.ConvertDateToString(date, time.RFC3339)
		//model student in go different with table student in database mysql
		records = append(records, user)
	}
	defer rows.Close()
	if records == nil {
		return nil
	}
	jsonResponse, jsonError := json.Marshal(records)
	if jsonError != nil {
		fmt.Println(jsonError)
		return nil
	}
	return jsonResponse
}

func FindStudentListByIndex(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	startIndexs, value := r.URL.Query()["startIndex"]

	if !value || len(startIndexs[0]) < 1 {
		log.Println("Url Param 'key' is missing")
		w.WriteHeader(http.StatusNotFound)
		return
	}
	startIndex := startIndexs[0]

	offsets, value := r.URL.Query()["offset"]

	if !value || len(offsets[0]) < 1 {
		log.Println("Url Param 'key' is missing")
		w.WriteHeader(http.StatusNotFound)
		return
	}
	offset := offsets[0]

	jsonResponse := getDataStudentFromDBWithIndex(startIndex, offset)
	if jsonResponse == nil {
		w.WriteHeader(http.StatusNoContent)
		return
	}
	w.Write(jsonResponse)
	w.WriteHeader(http.StatusOK)
}

func getDataStudentFromDBWithIndex(startIndex string, offset string) []byte {
	database := db.DBConn()
	defer database.Close()
	var (
		user    model.Student
		records []model.Student
	)
	limitValue, err := strconv.Atoi(offset)
	startValue, err := strconv.Atoi(startIndex)
	rows, err := database.Query("SELECT * FROM Student limit ? offset ?", limitValue, startValue)
	if err != nil {
		fmt.Println(err)
		return nil
	}
	for rows.Next() {
		var date, datecreate time.Time
		var count int
		var face_photo string
		rows.Scan(&user.Id, &user.ParentID, &user.ClassID, &user.Name, &user.Birthday, &face_photo, &datecreate, &date, &count)
		//user.UpdateDate = h.ConvertDateToString(date, time.RFC3339)
		//model student in go different with table student in database mysql
		records = append(records, user)
	}
	defer rows.Close()
	if records == nil {
		return nil
	}
	jsonResponse, jsonError := json.Marshal(records)
	if jsonError != nil {
		fmt.Println(jsonError)
		return nil
	}
	return jsonResponse
}

func UpdateStudent(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	ID := mux.Vars(r)["id"]
	log.Printf(ID)
	decoder := json.NewDecoder(r.Body)
	var t model.Student
	err := decoder.Decode(&t)
	if err != nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		return
	}
	log.Println(t)
	e := updateRecordStudent(ID, t)
	if e != nil {
		log.Printf(e.Error())
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
}

func updateRecordStudent(ID string, t model.Student) (err error) {
	database := db.DBConn()
	defer database.Close()
	tx, err := db.SQLBegin(database)
	if err != nil {
		log.Println(err)
		return err
	}
	sid, err := strconv.Atoi(ID)
	ParentID := t.ParentID
	ClassID := t.ClassID
	Name := t.Name
	Birthday := t.Birthday
	updateDate := time.Now()
	insForm, err := db.SQLExec(tx, "Update Student Set parent_id= ?,class_id= ?, name= ? ,birthday= ?,date_update= ?, update_count = update_count + 1, where id= ?")
	if err != nil {
		log.Println(err)
		return err
	}
	if _, err := insForm.Exec(ParentID, ClassID, Name, Birthday, updateDate, sid); err != nil {
		tx.Rollback()
		log.Println(err)
		return err
	}
	tx.Commit()
	return nil
}

func FindStudentActivityByID(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func FindStudentNoticeByID(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func FindStudentTuitionFeeyByID(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
