/*
 * Demo App
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"log"
	"net/http"
	"strconv"
	db "tfnserver/db"
	helper "tfnserver/helper"
	model "tfnserver/model"
	"time"

	"github.com/gorilla/mux"
)

func CreateForm(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	decoder := json.NewDecoder(r.Body)
	var form model.Form
	err := decoder.Decode(&form)
	log.Println(form)
	if err != nil {
		log.Println("decode err", err)
		w.WriteHeader(http.StatusUnprocessableEntity)
		return
	}
	e := createRecordForm(form, r.Host)
	if e != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
}

func createRecordForm(form model.Form, host string) (err error) {
	database := db.DBConn()
	defer database.Close()
	tx, err := db.SQLBegin(database)
	if err != nil {
		return err
	}
	Type := form.Type_
	timeNow := time.Now()
	query := ""

	switch Type {
	// Absence form
	case 1:
		query = "INSERT INTO Application(repeat_id,poster_id,student_id,application_from_date, application_to_date,class_time, type,note, date_create,date_update, update_count) VALUES(?,?,?,?,?,?,?,?,?,?,?)"
		insForm, err := db.SQLExec(tx, query)
		if err != nil {
			log.Println("insert err", err)
			return err
		}
		if _, err := insForm.Exec(form.Repeated, form.PosterID, form.StudentID, form.DateRequestFrom, form.DateRequestTo, form.ClassTime, Type, form.Content, timeNow, timeNow, 0); err != nil {
			tx.Rollback()
			log.Println("exc err", err)
			return err
		}
		break
	// Late pickup form
	case 2:
		Photo := host + "/image/" + helper.SaveToFile(form.PickerPhoto, "photo")
		query = "INSERT INTO Application(repeat_id,poster_id,student_id,application_from_date, application_to_date,application_time,class_time,type,note,late_meal,picker_name,picker_face_photo,picker_phone, date_create,date_update, update_count) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
		insForm, err := db.SQLExec(tx, query)
		if err != nil {
			log.Println("insert err", err)
			return err
		}
		if _, err := insForm.Exec(form.Repeated, form.PosterID, form.StudentID, form.DateRequestFrom, form.DateRequestTo, Type, form.Content, form.LateMeal, form.PickerName, Photo, form.PickerPhone, timeNow, timeNow, 0); err != nil {
			tx.Rollback()
			log.Println("exc err", err)
			return err
		}
		break
	case 3:
		query = "INSERT INTO Application(repeat_id,poster_id,student_id,application_from_date, application_to_date,type,note,meal_absent,date_create,date_update, update_count) VALUES(?,?,?,?,?,?,?,?,?,?,?)"
		insForm, err := db.SQLExec(tx, query)
		if err != nil {
			log.Println("insert err", err)
			return err
		}
		if _, err := insForm.Exec(form.Repeated, form.PosterID, form.StudentID, form.DateRequestFrom, form.DateRequestTo, Type, form.Content, form.CancelMeal, timeNow, timeNow, 0); err != nil {
			tx.Rollback()
			log.Println("exc err", err)
			return err
		}
		break
	}

	tx.Commit()
	return nil
}

func UpdateForm(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	ID := mux.Vars(r)["id"]
	log.Printf(ID)
	decoder := json.NewDecoder(r.Body)
	var t model.Form
	err := decoder.Decode(&t)
	if err != nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		return
	}
	log.Println(t)
	e := updateRecordForm(ID, t, r.Host)
	if e != nil {
		log.Printf(e.Error())
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
}

func updateRecordForm(ID string, t model.Form, host string) (err error) {
	database := db.DBConn()
	defer database.Close()
	tx, err := db.SQLBegin(database)
	if err != nil {
		log.Println(err)
		return err
	}
	sid, err := strconv.Atoi(ID)
	Type := t.Type_
	StudentID := t.StudentID
	PosterID := t.PosterID
	//ClassTime := t.ClassTime ???
	//Title := t.Title ???
	Content := t.Content
	DateRequest := t.DateRequestFrom
	TimeRequest := t.TimeRequest
	CancelMeal := t.CancelMeal
	LateMeal := t.LateMeal
	PickerName := t.PickerName
	PickerPhoto := host + "/image/" + helper.SaveToFile(t.PickerPhoto, "photo")
	//PickerPhoto := t.PickerPhoto
	//IsCancelMeal := t.IsCancelMeal ???
	updateDate := time.Now()
	insForm, err := db.SQLExec(tx, "Update Application Set repeat_id=?,student_id=?,application_from_date=?,application_time=?,type=?,note=?,meal_absent=?,late_meal=?,picker_name=?,picker_face_photo=?,direction=?,approved=?,approver=?,date_update= ?, update_count = update_count + 1 where id= ?")
	if err != nil {
		log.Println(err)
		return err
	}
	if _, err := insForm.Exec(PosterID, StudentID, DateRequest, TimeRequest, Type, Content, CancelMeal, LateMeal, PickerName, PickerPhoto, "direction", "approved", "approver", updateDate, sid); err != nil {
		tx.Rollback()
		log.Println(err)
		return err
	}
	tx.Commit()
	return nil
}
