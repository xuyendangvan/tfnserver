/*
 * Demo App
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	db "git_source_release/db"
	model "git_source_release/model"
	"log"
	"net/http"
	"strconv"
	"time"

	"github.com/gorilla/mux"
)

func CreateForm(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	decoder := json.NewDecoder(r.Body)
	var form model.Form
	err := decoder.Decode(&form)
	log.Println(form)
	if err != nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		return
	}
	e := createRecordForm(form)
	if e != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
}

func createRecordForm(form model.Form) (err error) {
	database := db.DBConn()
	defer database.Close()
	tx, err := db.SQLBegin(database)
	if err != nil {
		return err
	}
	Type := form.Type_
	StudentID := form.StudentID
	PosterID := form.PosterID
	//ClassTime := form.ClassTime ???
	//Title := form.Title ???
	Content := form.Content
	DateRequest := form.DateRequest
	TimeRequest := form.TimeRequest
	CancelMeal := form.CancelMeal
	LateMeal := form.LateMeal
	PickerName := form.PickerName
	PickerPhoto := form.PickerPhoto
	//IsCancelMeal := form.IsCancelMeal ???
	DateCreate := time.Now()
	DateUpdate := time.Now()
	insForm, err := db.SQLExec(tx, "INSERT INTO Application(repeat_id,student_id,application_date,application_time,type,note,meal_absent,late_meal,picker_name,picker_face_photo,direction,approved,approver, date_create,date_update, update_count) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)")
	if err != nil {
		return err
	}
	if _, err := insForm.Exec(PosterID, StudentID, DateRequest, TimeRequest, Type, Content, CancelMeal, LateMeal, PickerName, PickerPhoto, "direction", 1, 1, DateCreate, DateUpdate, 0); err != nil {
		tx.Rollback()
		return err
	}
	tx.Commit()
	return nil
}

func UpdateForm(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Connection", "close")
	r.Header.Set("Connection", "close")
	defer r.Body.Close()
	ID := mux.Vars(r)["id"]
	log.Printf(ID)
	decoder := json.NewDecoder(r.Body)
	var t model.Form
	err := decoder.Decode(&t)
	if err != nil {
		w.WriteHeader(http.StatusUnprocessableEntity)
		return
	}
	log.Println(t)
	e := updateRecordForm(ID, t)
	if e != nil {
		log.Printf(e.Error())
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusOK)
}

func updateRecordForm(ID string, t model.Form) (err error) {
	database := db.DBConn()
	defer database.Close()
	tx, err := db.SQLBegin(database)
	if err != nil {
		log.Println(err)
		return err
	}
	sid, err := strconv.Atoi(ID)
	Type := t.Type_
	StudentID := t.StudentID
	PosterID := t.PosterID
	//ClassTime := t.ClassTime ???
	//Title := t.Title ???
	Content := t.Content
	DateRequest := t.DateRequest
	TimeRequest := t.TimeRequest
	CancelMeal := t.CancelMeal
	LateMeal := t.LateMeal
	PickerName := t.PickerName
	PickerPhoto := t.PickerPhoto
	//IsCancelMeal := t.IsCancelMeal ???
	updateDate := time.Now()
	insForm, err := db.SQLExec(tx, "Update Application Set repeat_id=?,student_id=?,application_date=?,application_time=?,type=?,note=?,meal_absent=?,late_meal=?,picker_name=?,picker_face_photo=?,direction=?,approved=?,approver=?,date_update= ?, update_count = update_count + 1 where id= ?")
	if err != nil {
		log.Println(err)
		return err
	}
	if _, err := insForm.Exec(PosterID, StudentID, DateRequest, TimeRequest, Type, Content, CancelMeal, LateMeal, PickerName, PickerPhoto, "direction", "approved", "approver", updateDate, sid); err != nil {
		tx.Rollback()
		log.Println(err)
		return err
	}
	tx.Commit()
	return nil
}
